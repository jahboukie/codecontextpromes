name: Security-First CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  security-audit:
    name: Security Audit & SAST
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint Security Rules
      run: npm run lint

    - name: Run NPM Security Audit
      run: npm audit --audit-level moderate

    - name: Static Application Security Testing (SAST)
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: true
        VALIDATE_JAVASCRIPT_ES: false
        VALIDATE_TYPESCRIPT_ES: false
        VALIDATE_JSON: true
        VALIDATE_YAML: true
        VALIDATE_MARKDOWN: true
        VALIDATE_DOCKERFILE: true
        VALIDATE_BASH: true

    - name: Secret Scanning
      run: |
        # Check for potential secrets in code
        if grep -r "sk_" --include="*.ts" --include="*.js" src/ | grep -v "/.*sk_.*/" | grep -v "toMatch.*sk_" | grep -q .; then
          echo "❌ Potential secret key found in source code!"
          exit 1
        fi
        echo "✅ No obvious secrets found in source code"

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-audit

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run Unit Tests
      run: npm test

    - name: Test CLI commands
      run: |
        # Test basic CLI functionality
        node dist/cli.js --version
        node dist/cli.js --help

        # Test memory operations
        node dist/cli.js init
        node dist/cli.js remember "Test memory for CI/CD"
        node dist/cli.js recall "Test"
        node dist/cli.js status

  publish:
    name: Publish to NPM
    needs: [security-audit, build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Publish to npm (if version changed)
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PUBLISHED_VERSION=$(npm view codeconmem version 2>/dev/null || echo "0.0.0")

        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "Publishing version $CURRENT_VERSION (was $PUBLISHED_VERSION)"
          npm publish
        else
          echo "Version $CURRENT_VERSION already published, skipping"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
